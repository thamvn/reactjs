{"version":3,"sources":["CheckOutPage.js","App.js","serviceWorker.js","index.js"],"names":["CheckOutPage","state","cart","JSON","parse","localStorage","getItem","sumPrice","bind","back","total","this","alert","i","length","price","window","location","href","className","map","item","name","onClick","React","Component","App","items","checkout","pick","remove","refresh","setState","listItems","listCart","setItem","stringify","e","newCart","newItems","push","splice","indexOf","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51650890.chunk.js","sourcesContent":["import React from 'react';\n\nclass CheckOutPage extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            cart: JSON.parse(localStorage.getItem('cart'))\n\n        }\n        this.sumPrice = this.sumPrice.bind(this);\n        this.back = this.back.bind(this);\n    }\n    sumPrice(){\n        let total = 0;\n        let cart = this.state.cart;\n        if (cart === []) { alert(\"Chua mua gi!!\")}\n        else\n        {\n            for (let i = 0; i < cart.length ; i++)\n            {\n                total += cart[i].price;\n            }\n        }\n        return total;\n    }\n    back(){\n        window.location.href  =\"#\";\n    }\n    render(){\n        return(\n            <div className=\"row\">\n                <div className=\"col-md-12\">\n                    <div className=\"box-body\">\n                        <table className=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>Item</th>\n                                    <th>Price</th>\n                                    \n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr>\n                                    {this.state.cart.map(item =>\n                                        <tr>\n                                            <td>{item.name}</td>\n                                            <td>{item.price}</td>\n                                            \n                                        </tr>)}\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <div className=\"col-md-12\">\n                    <h3>Total: {this.sumPrice()}</h3>\n                </div>\n                <div className=\"col-md-12\">\n                    <button onClick={this.back}>Back</button>\n                </div>\n            </div>\n        )\n    }\n}\nexport default CheckOutPage","import React from 'react';\n// import logo from './logo.svg';\nimport { HashRouter as Router, Route ,Switch} from 'react-router-dom'\nimport CheckOutPage from './CheckOutPage';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      items:[\n        {\n          name: \"book\",\n          price: 3\n        },\n        {\n          name: \"clothes\",\n          price: 5\n        },\n        {\n          name: \"hat\",\n          price: 2\n        },\n        {\n          name: \"shoe\",\n          price: 4\n        },\n        {\n          name: \"toy\",\n          price: 6\n        }\n      ],\n      cart: []\n    }\n    this.checkout = this.checkout.bind(this);\n    this.pick = this.pick.bind(this)\n    this.remove = this.remove.bind(this);\n    this.refresh = this.refresh.bind(this);\n\n  }\n  refresh(){\n    if (localStorage.getItem('items') !== null)\n    {\n      this.setState({items: JSON.parse(localStorage.getItem('items'))})\n    }\n    else this.setState({items:[]});\n    if (localStorage.getItem('cart') !== null)\n    {\n      this.setState({cart: JSON.parse(localStorage.getItem('cart'))})\n    }\n    else this.setState({cart:[]});\n  }\n  checkout(){\n    let listItems = this.state.items;\n    let listCart = this.state.cart;\n    if (listItems !== [])\n    {\n      localStorage.setItem('items', JSON.stringify(listItems));\n    }\n    if (listCart !== [])\n    {\n      localStorage.setItem('cart', JSON.stringify(listCart));\n    }\n    window.location.href  =\"#/checkout\";\n  }\n  pick(item,e){\n    let newCart = this.state.cart;\n    let newItems = this.state.items;\n    newCart.push(item);\n    newItems.splice(newItems.indexOf(item),1);\n    this.setState({item: newItems, cart: newCart})\n    \n    \n  }\n  remove(item,e){\n    let newCart = this.state.cart;\n    let newItems = this.state.items;\n    newItems.push(item);\n    newCart.splice(newCart.indexOf(item),1);\n    this.setState({item: newItems, cart: newCart})\n  }\n  render(){\n    return (\n      <div>\n                <h2>SHOP</h2>\n                <div className=\"row\">\n                    {this.state.items.map(item =>\n                        <div className=\"col-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-body\">\n                                    <h3 className=\"card-title\">Item: {item.name}</h3>\n                                    <h3 className=\"card-text\">Price: {item.price}</h3>\n                                    <button onClick={e => this.pick(item, e)} >Add</button>\n                                    \n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n                \n                <h2>CART</h2>\n                <div className=\"row\">\n                    {this.state.cart.map(item =>\n                        <div className=\"col-md-4\">\n                            <div className=\"card\">\n                                <div className=\"card-body\">\n                                    <h3 className=\"card-title\">Item: {item.name}</h3>\n                                    <h3 className=\"card-text\">Price: {item.price}</h3>\n                                    <button onClick={e => this.remove(item, e)} >Remove</button>\n                                    \n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n                <Router>\n                  <Switch>\n                  <Route path=\"/checkout\" component = {CheckOutPage}></Route> \n                  </Switch>\n                \n                </Router>\n                <button onClick={e => this.checkout()}>Checkout</button>\n            </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}